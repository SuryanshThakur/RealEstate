{"ast":null,"code":"import axios from 'axios';\nimport { GET_LISTING, ADD_LISTING, LIST_LOADING, C_LIKE, GET_SINGLE_LIST, GET_ERRORS } from './types';\nimport { tokenConfig } from './authActions';\nimport { returnErrors } from './errorActions';\nexport const addListing = listing => async (dispatch, getState) => {\n  try {\n    dispatch(setLoading());\n    const result = await axios.post('http://localhost:5000/add', listing, tokenConfig(getState));\n    console.log(result);\n    dispatch({\n      type: ADD_LISTING,\n      payload: result.data\n    });\n  } catch (err) {\n    console.error(`Error Occured`, err);\n    dispatch(returnErrors(err.response.data, err.response.status, 'ADDLIST_FAIL'));\n  }\n};\nexport const getListings = () => async dispatch => {\n  try {\n    dispatch(setLoading());\n    const res = await axios.get('http://localhost:5000');\n    dispatch({\n      type: GET_LISTING,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(returnErrors(err.response.data, err.response.status, null));\n  }\n};\nexport const controlLike = like => async dispatch => {\n  try {\n    const res = await axios.put('http://localhost:5000/user/like', like);\n    dispatch({\n      type: C_LIKE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(returnErrors(err.response.data, err.response.status, null));\n  }\n};\nexport const singleList = id => async (dispatch, getState) => {\n  dispatch({\n    type: LIST_LOADING\n  });\n\n  try {\n    const res = await axios.get(`http://localhost:5000/singleList/${id}`, tokenConfig(getState));\n    dispatch({\n      type: GET_SINGLE_LIST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch(returnErrors(err.response.data, err.response.status, null));\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: LIST_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/suryansh/Downloads/Mern---Real-Estate/frontend/src/actions/listActions.js"],"names":["axios","GET_LISTING","ADD_LISTING","LIST_LOADING","C_LIKE","GET_SINGLE_LIST","GET_ERRORS","tokenConfig","returnErrors","addListing","listing","dispatch","getState","setLoading","result","post","console","log","type","payload","data","err","error","response","status","getListings","res","get","controlLike","like","put","singleList","id"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { GET_LISTING, ADD_LISTING, LIST_LOADING, C_LIKE, GET_SINGLE_LIST, GET_ERRORS } from './types';\nimport { tokenConfig } from './authActions';\nimport { returnErrors } from './errorActions';\n\nexport const addListing = listing => async (dispatch, getState) => {\n    try {\n        dispatch(setLoading());\n        const result = await axios.post('http://localhost:5000/add', listing, tokenConfig(getState));\n        console.log(result);\n        dispatch({\n            type: ADD_LISTING,\n            payload: result.data\n        });\n    } catch (err) {\n        console.error(`Error Occured`, err);\n        dispatch(returnErrors(err.response.data, err.response.status, 'ADDLIST_FAIL'));\n    }\n};\n\nexport const getListings = () => async dispatch => {\n    try {\n        dispatch(setLoading());\n        const res = await axios.get('http://localhost:5000');\n        dispatch({\n            type: GET_LISTING,\n            payload: res.data\n        })\n    } catch (err) { dispatch(returnErrors(err.response.data, err.response.status, null)) }\n}\n\nexport const controlLike = like => async dispatch => {\n    try {\n        const res = await axios.put('http://localhost:5000/user/like', like);\n        dispatch({\n            type: C_LIKE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch(returnErrors(err.response.data, err.response.status, null))\n    }\n}\n\nexport const singleList = id => async (dispatch, getState) => {\n\n    dispatch({ type: LIST_LOADING });\n    try {\n        const res = await axios.get(`http://localhost:5000/singleList/${id}`, tokenConfig(getState));\n        dispatch({\n            type: GET_SINGLE_LIST,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch(returnErrors(err.response.data, err.response.status, null));\n    }\n}\n\n\nexport const setLoading = () => {\n    return {\n        type: LIST_LOADING\n    }\n}"]},"metadata":{},"sourceType":"module"}