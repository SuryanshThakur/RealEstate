{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOADING, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://localhost:5000/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, null));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = userData => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n  axios.post('http://localhost:5000/register', userData).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = userData => dispatch => {\n  dispatch({\n    type: LOADING\n  });\n  axios.post('http://localhost:5000/login', userData).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/suryansh/Downloads/Mern---Real-Estate/frontend/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOADING","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","userData","post","login","logout","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,OANJ,EAOIC,cAPJ,EAQIC,gBARJ,EASIC,aATJ,QAUO,SAVP,C,CAYA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACAH,EAAAA,KAAK,CAACe,GAAN,CAAU,4BAAV,EAAwCC,WAAW,CAACH,QAAD,CAAnD,EAA+DI,IAA/D,CAAoEC,GAAG,IAAIN,QAAQ,CAAC;AAChFE,IAAAA,IAAI,EAAEZ,WAD0E;AAEhFiB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFmE,GAAD,CAAnF,EAIKC,KAJL,CAIWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACX,YAAY,CAACqB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,IAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH,GATL;AAUH,CAbM;AAeP,OAAO,MAAMqB,QAAQ,GAAIC,QAAD,IAAcd,QAAQ,IAAI;AAC9CA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACAP,EAAAA,KAAK,CAAC2B,IAAN,CAAW,gCAAX,EAA6CD,QAA7C,EAAuDT,IAAvD,CAA4DC,GAAG,IAAIN,QAAQ,CAAC;AACxEE,IAAAA,IAAI,EAAEL,gBADkE;AAExEU,IAAAA,OAAO,EAAED,GAAG,CAACE;AAF2D,GAAD,CAA3E,EAGIC,KAHJ,CAGUC,GAAG,IAAI;AACbV,IAAAA,QAAQ,CAACX,YAAY,CAACqB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GARD;AASH,CAXM;AAaP,OAAO,MAAMkB,KAAK,GAAIF,QAAD,IAAcd,QAAQ,IAAI;AAC3CA,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AAEAP,EAAAA,KAAK,CAAC2B,IAAN,CAAW,6BAAX,EAA0CD,QAA1C,EAAoDT,IAApD,CAAyDC,GAAG,IAAIN,QAAQ,CAAC;AACrEE,IAAAA,IAAI,EAAET,aAD+D;AAErEc,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFwD,GAAD,CAAxE,EAKEC,KALF,CAKQC,GAAG,IAAI;AACXV,IAAAA,QAAQ,CAACX,YAAY,CAACqB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,YAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAER;AADD,KAAD,CAAR;AAIH,GAXD;AAYH,CAfM;AAiBP,OAAO,MAAMuB,MAAM,GAAG,MAAM;AACxB,SAAO;AACHf,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMQ,WAAW,GAAGH,QAAQ,IAAI;AACnC;AACA,QAAMiB,KAAK,GAAGjB,QAAQ,GAAGkB,IAAX,CAAgBD,KAA9B,CAFmC,CAInC;;AACA,QAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CALmC,CAWnC;;AACA,MAAIH,KAAJ,EAAW;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AAED,SAAOE,MAAP;AACH,CAjBM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOADING,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\n\n// Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n    // User Loading\n    dispatch({ type: USER_LOADING });\n    axios.get('http://localhost:5000/user', tokenConfig(getState)).then(res => dispatch({\n        type: USER_LOADED,\n        payload: res.data\n    }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, null));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n}\n\nexport const register = (userData) => dispatch => {\n    dispatch({ type: LOADING });\n    axios.post('http://localhost:5000/register', userData).then(res => dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n    })).catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n        dispatch({\n            type: REGISTER_FAIL\n        })\n    })\n}\n\nexport const login = (userData) => dispatch => {\n    dispatch({ type: LOADING });\n\n    axios.post('http://localhost:5000/login', userData).then(res => dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n\n    })\n    ).catch(err => {\n        dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n        dispatch({\n            type: LOGIN_FAIL\n        })\n\n    })\n}\n\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    };\n\n    // If token, add to headers\n    if (token) {\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n};\n"]},"metadata":{},"sourceType":"module"}